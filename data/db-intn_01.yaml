- en: Part I. Storage Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分：存储引擎
- en: The primary job of any database management system is reliably storing data and
    making it available for users. We use databases as a primary source of data, helping
    us to share it between the different parts of our applications. Instead of finding
    a way to store and retrieve information and inventing a new way to organize data
    every time we create a new app, we use databases. This way we can concentrate
    on application logic instead of infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何数据库管理系统的主要工作是可靠地存储数据并使其对用户可用。我们使用数据库作为数据的主要来源，帮助我们在应用程序的不同部分之间共享数据。我们不必在每次创建新应用程序时找到存储和检索信息的方法，也不必发明新的数据组织方式，而是直接使用数据库。这样，我们可以集中精力于应用程序逻辑，而不是基础设施。
- en: Since the term *database management system* (DBMS) is quite bulky, throughout
    this book we use more compact terms, *database system* and *database*, to refer
    to the same concept.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于术语*数据库管理系统*（DBMS）相当庞大，在本书中，我们使用更紧凑的术语，*数据库系统* 和 *数据库*，来指代相同的概念。
- en: 'Databases are modular systems and consist of multiple parts: a transport layer
    accepting requests, a query processor determining the most efficient way to run
    queries, an execution engine carrying out the operations, and a storage engine
    (see [“DBMS Architecture”](ch01.html#dbms_architecture)).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是模块化系统，由多个部分组成：接受请求的传输层，确定运行查询最有效方法的查询处理器，执行操作的执行引擎，以及存储引擎（见[“数据库管理系统架构”](ch01.html#dbms_architecture)）。
- en: The *storage engine* (or database engine) is a software component of a database
    management system responsible for storing, retrieving, and managing data in memory
    and on disk, designed to capture a persistent, long-term memory of each node [[REED78]](app01.html#REED78).
    While databases can respond to complex queries, storage engines look at the data
    more granularly and offer a simple data manipulation API, allowing users to create,
    update, delete, and retrieve records. One way to look at this is that database
    management systems are applications built on top of storage engines, offering
    a schema, a query language, indexing, transactions, and many other useful features.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*存储引擎*（或数据库引擎）是数据库管理系统的软件组件，负责在内存和磁盘上存储、检索和管理数据，旨在捕获每个节点的持久、长期内存[[REED78]](app01.html#REED78)。虽然数据库可以响应复杂的查询，但存储引擎更细粒度地查看数据，并提供简单的数据操作API，允许用户创建、更新、删除和检索记录。可以这样看待：数据库管理系统是构建在存储引擎之上的应用程序，提供了模式、查询语言、索引、事务和许多其他有用的功能。'
- en: For flexibility, both keys and values can be arbitrary sequences of bytes with
    no prescribed form. Their sorting and representation semantics are defined in
    higher-level subsystems. For example, you can use `int32` (32-bit integer) as
    a key in one of the tables, and `ascii` (ASCII string) in the other; from the
    storage engine perspective both keys are just serialized entries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了灵活性，键和值都可以是任意字节序列，没有规定的形式。它们的排序和表示语义由更高级别的子系统定义。例如，您可以在一张表中使用`int32`（32位整数）作为键，而在另一张表中使用`ascii`（ASCII字符串）作为键；从存储引擎的角度来看，这些键都只是序列化的条目。
- en: Storage engines such as [BerkeleyDB](https://databass.dev/links/92), [LevelDB](https://databass.dev/links/93)
    and its descendant [RocksDB](https://databass.dev/links/94), [LMDB](https://databass.dev/links/95)
    and its descendant [libmdbx](https://databass.dev/links/96), [Sophia](https://databass.dev/links/97),
    [HaloDB](https://databass.dev/links/98), and many others were developed independently
    from the database management systems they’re now embedded into. Using pluggable
    storage engines has enabled database developers to bootstrap database systems
    using existing storage engines, and concentrate on the other subsystems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如[BerkeleyDB](https://databass.dev/links/92)，[LevelDB](https://databass.dev/links/93)及其后代[RocksDB](https://databass.dev/links/94)，[LMDB](https://databass.dev/links/95)及其后代[libmdbx](https://databass.dev/links/96)，[Sophia](https://databass.dev/links/97)，[HaloDB](https://databass.dev/links/98)等存储引擎最初独立于现在嵌入到的数据库管理系统中进行开发。使用可插拔的存储引擎使得数据库开发人员能够使用现有的存储引擎引导数据库系统，并专注于其他子系统。
- en: At the same time, clear separation between database system components opens
    up an opportunity to switch between different engines, potentially better suited
    for particular use cases. For example, MySQL, a popular database management system,
    has several [storage engines](https://databass.dev/links/99), including InnoDB,
    MyISAM, and [RocksDB](https://databass.dev/links/100) (in the [MyRocks](https://databass.dev/links/101)
    distribution). MongoDB allows switching between [WiredTiger](https://databass.dev/links/102),
    In-Memory, and the (now-deprecated) [MMAPv1](https://databass.dev/links/103) storage
    engines.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，数据库系统组件之间的清晰分离为切换不同引擎（可能更适合特定用例）开辟了机会。例如，MySQL，一个流行的数据库管理系统，有几个[存储引擎](https://databass.dev/links/99)，包括InnoDB、MyISAM以及[RockDB](https://databass.dev/links/100)（在[MyRocks](https://databass.dev/links/101)分发中）。MongoDB允许在[WiredTiger](https://databass.dev/links/102)、In-Memory和（现已不推荐使用的）[MMAPv1](https://databass.dev/links/103)存储引擎之间切换。
- en: Part I. Comparing Databases
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一部分 比较数据库
- en: Your choice of database system may have long-term consequences. If there’s a
    chance that a database is not a good fit because of performance problems, consistency
    issues, or operational challenges, it is better to find out about it earlier in
    the development cycle, since it can be nontrivial to migrate to a different system.
    In some cases, it may require substantial changes in the application code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的数据库系统可能会产生长期后果。如果存在某个数据库由于性能问题、一致性问题或操作挑战而不适合的可能性，最好在开发周期的早期了解这一点，因为迁移到不同系统可能是非平凡的。在某些情况下，可能需要对应用程序代码进行重大更改。
- en: Every database system has strengths and weaknesses. To reduce the risk of an
    expensive migration, you can invest some time before you decide on a specific
    database to build confidence in its ability to meet your application’s needs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据库系统都有其优点和缺点。为了减少昂贵迁移的风险，在决定特定数据库之前，可以投入一些时间来增强对其满足应用需求能力的信心。
- en: Trying to compare databases based on their components (e.g., which storage engine
    they use, how the data is shared, replicated, and distributed, etc.), their rank
    (an arbitrary popularity value assigned by consultancy agencies such as [ThoughtWorks](https://www.thoughtworks.com/de/radar)
    or database comparison websites such as [DB-Engines](https://db-engines.com/de/ranking)
    or [Database of Databases](https://dbdb.io)), or implementation language (C++,
    Java, or Go, etc.) can lead to invalid and premature conclusions. These methods
    can be used only for a high-level comparison and can be as coarse as choosing
    between HBase and SQLite, so even a superficial understanding of how each database
    works and what’s inside it can help you land a more weighted conclusion.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基于它们的组件（例如使用哪种存储引擎、数据如何共享、复制和分布等）、它们的排名（由咨询机构如[ThoughtWorks](https://www.thoughtworks.com/de/radar)或数据库比较网站如[DB-Engines](https://db-engines.com/de/ranking)或[Database
    of Databases](https://dbdb.io)分配的任意流行度值）或实现语言（C++、Java或Go等）来比较数据库可能导致无效和过早的结论。这些方法仅适用于高级别比较，并且可能像在HBase和SQLite之间选择一样粗略，因此即使对每个数据库的工作原理和内部结构有一些肤浅的理解，也有助于得出更加权衡的结论。
- en: Every comparison should start by clearly defining the goal, because even the
    slightest bias may completely invalidate the entire investigation. If you’re searching
    for a database that would be a good fit for the workloads you have (or are planning
    to facilitate), the best thing you can do is to simulate these workloads against
    different database systems, measure the performance metrics that are important
    for you, and compare results. Some issues, especially when it comes to performance
    and scalability, start showing only after some time or as the capacity grows.
    To detect potential problems, it is best to have long-running tests in an environment
    that simulates the real-world production setup as closely as possible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每次比较都应从明确定义目标开始，因为即使有轻微偏见，也可能完全无效整个调查。如果您正在寻找一个适合您拥有的工作负载（或计划促进的工作负载）的数据库，您可以做的最好的事情是模拟这些工作负载针对不同的数据库系统，测量对您重要的性能指标，并进行比较结果。一些问题，特别是当涉及性能和可伸缩性时，只有在一段时间后或容量增长时才会显现出来。为了检测潜在问题，最好在尽可能模拟真实生产设置的环境中进行长期运行的测试。
- en: 'Simulating real-world workloads not only helps you understand how the database
    performs, but also helps you learn how to operate, debug, and find out how friendly
    and helpful its community is. Database choice is always a combination of these
    factors, and performance often turns out *not* to be the most important aspect:
    it’s usually much better to use a database that slowly saves the data than one
    that quickly loses it.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟真实世界的工作负载不仅帮助你了解数据库的性能，还帮助你学习如何操作、调试，并发现其社区的友好程度和帮助性。选择数据库始终是这些因素的综合体，并且性能往往并不是最重要的方面：通常最好使用一个数据保存较慢的数据库，而不是一个数据丢失较快的数据库。
- en: 'To compare databases, it’s helpful to understand the use case in great detail
    and define the current and anticipated variables, such as:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较数据库，理解用例的细节非常有帮助，并定义当前和预期的变量，例如：
- en: Schema and record sizes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式和记录大小
- en: Number of clients
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端数量
- en: Types of queries and access patterns
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询类型和访问模式
- en: Rates of the read and write queries
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读写查询的速率
- en: Expected changes in any of these variables
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些变量的预期变化
- en: 'Knowing these variables can help to answer the following questions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些变量可以帮助回答以下问题：
- en: Does the database support the required queries?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库是否支持所需的查询？
- en: Is this database able to handle the amount of data we’re planning to store?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个数据库能处理我们计划存储的数据量吗？
- en: How many read and write operations can a single node handle?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个节点可以处理多少读写操作？
- en: How many nodes should the system have?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该有多少个节点？
- en: How do we expand the cluster given the expected growth rate?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何根据预期的增长率扩展集群？
- en: What is the maintenance process?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护过程是什么？
- en: Having these questions answered, you can construct a test cluster and simulate
    your workloads. Most databases already have stress tools that can be used to reconstruct
    specific use cases. If there’s no standard stress tool to generate realistic randomized
    workloads in the database ecosystem, it might be a red flag. If something prevents
    you from using default tools, you can try one of the existing general-purpose
    tools, or implement one from scratch.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些问题的答案，你可以构建一个测试集群并模拟你的工作负载。大多数数据库已经有压力测试工具，可以用来重现特定的使用场景。如果在数据库生态系统中没有标准的压力测试工具来生成真实的随机工作负载，这可能是一个警示信号。如果有什么阻止你使用默认工具，你可以尝试使用现有的通用工具，或者从头开始实现一个。
- en: If the tests show positive results, it may be helpful to familiarize yourself
    with the database code. Looking at the code, it is often useful to first understand
    the parts of the database, how to find the code for different components, and
    then navigate through those. Having even a rough idea about the database codebase
    helps you better understand the log records it produces, its configuration parameters,
    and helps you find issues in the application that uses it and even in the database
    code itself.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试显示出积极的结果，熟悉数据库代码可能会有所帮助。查看代码时，通常首先了解数据库的各个部分以及如何查找不同组件的代码，然后浏览这些代码。对数据库代码库有一个大致的概念有助于更好地理解它产生的日志记录、其配置参数，并帮助找出使用它的应用程序甚至数据库代码本身中的问题。
- en: It’d be great if we could use databases as black boxes and never have to take
    a look inside them, but the practice shows that sooner or later a bug, an outage,
    a performance regression, or some other problem pops up, and it’s better to be
    prepared for it. If you know and understand database internals, you can reduce
    business risks and improve chances for a quick recovery.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以将数据库作为黑盒子使用，并且永远不必查看其内部，那将是很好的。但实践表明，sooner or later，会出现 bug、故障、性能回退或其他问题，最好做好准备。如果你了解并理解数据库的内部机制，可以减少业务风险并提高快速恢复的机会。
- en: One of the popular tools used for benchmarking, performance evaluation, and
    comparison is [Yahoo! Cloud Serving Benchmark](https://databass.dev/links/104)
    (YCSB). YCSB offers a framework and a common set of workloads that can be applied
    to different data stores. Just like anything generic, this tool should be used
    with caution, since it’s easy to make wrong conclusions. To make a fair comparison
    and make an educated decision, it is necessary to invest enough time to understand
    the real-world conditions under which the database has to perform, and tailor
    benchmarks accordingly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用于基准测试、性能评估和比较的流行工具之一是[Yahoo! Cloud Serving Benchmark](https://databass.dev/links/104)（YCSB）。
    YCSB提供了一个框架和一套通用的工作负载，可以应用于不同的数据存储。就像任何通用工具一样，必须谨慎使用此工具，因为很容易得出错误的结论。为了进行公平比较和做出明智的决策，有必要投入足够的时间来了解数据库在必须执行的真实条件下的表现，并相应地调整基准测试。
- en: This doesn’t mean that benchmarks can be used *only* to compare databases. Benchmarks
    can be useful to define and test details of the service-level agreement,^([1](part01.html#idm46466889878968))
    understanding system requirements, capacity planning, and more. The more knowledge
    you have about the database before using it, the more time you’ll save when running
    it in production.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着基准测试仅能用于比较数据库。基准测试还可以用于定义和测试服务级别协议的细节，理解系统需求，进行容量规划等等。在使用数据库之前，您对数据库了解得越多，将在生产中运行时节省的时间就越多。
- en: Choosing a database is a long-term decision, and it’s best to keep track of
    newly released versions, understand what exactly has changed and why, and have
    an upgrade strategy. New releases usually contain improvements and fixes for bugs
    and security issues, but may introduce new bugs, performance regressions, or unexpected
    behavior, so testing new versions before rolling them out is also critical. Checking
    how database implementers were handling upgrades previously might give you a good
    idea about what to expect in the future. Past smooth upgrades do not guarantee
    that future ones will be as smooth, but complicated upgrades in the past might
    be a sign that future ones won’t be easy, either.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择数据库是一个长期决策，最好跟踪新发布的版本，了解具体变更及其原因，并制定升级策略。新版本通常包含改进和修复的错误和安全问题，但可能引入新的错误、性能退化或意外行为，因此在推出新版本之前测试是至关重要的。查看数据库实施者如何处理以前的升级可能会给您一个关于未来预期的好主意。过去的平稳升级并不保证未来的升级也会顺利进行，但过去复杂的升级可能表明未来的升级也不会轻松。
- en: Part I. Understanding Trade-Offs
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一部分：理解权衡
- en: As users, we can see how databases behave under different conditions, but when
    working on databases, we have to make choices that influence this behavior directly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我们可以看到数据库在不同条件下的行为，但在处理数据库时，我们必须做出直接影响这种行为的选择。
- en: 'Designing a storage engine is definitely more complicated than just implementing
    a textbook data structure: there are many details and edge cases that are hard
    to get right from the start. We need to design the physical data layout and organize
    pointers, decide on the serialization format, understand how data is going to
    be garbage-collected, how the storage engine fits into the semantics of the database
    system as a whole, figure out how to make it work in a concurrent environment,
    and, finally, make sure we never lose any data, under any circumstances.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设计存储引擎绝对比简单地实现教科书数据结构复杂得多：有很多细节和边缘情况从一开始就很难做到正确。我们需要设计物理数据布局和组织指针，决定序列化格式，理解数据如何进行垃圾回收，存储引擎如何完全适配数据库系统的语义，找出如何在并发环境中使其工作，并确保在任何情况下都不会丢失任何数据。
- en: Not only there are many things to decide upon, but most of these decisions involve
    trade-offs. For example, if we save records in the order they were inserted into
    the database, we can store them quicker, but if we retrieve them in their lexicographical
    order, we have to re-sort them before returning results to the client. As you
    will see throughout this book, there are many different approaches to storage
    engine design, and every implementation has its own upsides and downsides.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅需要做出许多决策，而且大多数决策都涉及权衡。例如，如果我们按照插入到数据库中的顺序保存记录，我们可以更快地存储它们，但如果我们按字典顺序检索它们，我们必须在返回结果给客户端之前重新排序它们。正如您将在本书中看到的那样，存储引擎设计有许多不同的方法，每种实现都有其优缺点。
- en: When looking at different storage engines, we discuss their benefits and shortcomings.
    If there was an absolutely optimal storage engine for every conceivable use case,
    everyone would just use it. But since it does not exist, we need to choose wisely,
    based on the workloads and use cases we’re trying to facilitate.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看不同的存储引擎时，我们讨论它们的优点和缺点。如果每种情况下都有绝对最优的存储引擎，那么每个人都会选择使用它。但由于这种情况不存在，我们需要根据工作负载和使用情况来明智选择。
- en: There are many storage engines, using all sorts of data structures, implemented
    in different languages, ranging from low-level ones, such as C, to high-level
    ones, such as Java. All storage engines face the same challenges and constraints.
    To draw a parallel with city planning, it is possible to build a city for a specific
    population and choose to build *up* or build *out*. In both cases, the same number
    of people will fit into the city, but these approaches lead to radically different
    lifestyles. When building the city up, people live in apartments and population
    density is likely to lead to more traffic in a smaller area; in a more spread-out
    city, people are more likely to live in houses, but commuting will require covering
    larger distances.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎有很多种，使用各种数据结构，用不同的语言实现，从低级语言如C，到高级语言如Java。所有存储引擎面临相同的挑战和限制。为了与城市规划作类比，可以为特定人口建造城市，并选择向*上*建造或向*外*扩展。在这两种情况下，同样数量的人可以适应城市，但这些方法会导致完全不同的生活方式。向上建造城市时，人们住在公寓里，人口密度可能导致更小区域内的更多交通；在更分散的城市中，人们更可能住在房子里，但通勤需要覆盖更大的距离。
- en: 'Similarly, design decisions made by storage engine developers make them better
    suited for different things: some are optimized for low read or write latency,
    some try to maximize density (the amount of stored data per node), and some concentrate
    on operational simplicity.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，存储引擎开发人员的设计决策使它们更适合不同的用途：有些优化于低读写延迟，有些试图最大化密度（每个节点存储的数据量），有些集中于操作简单性。
- en: You can find complete algorithms that can be used for the implementation and
    other additional references in the chapter summaries. Reading this book should
    make you well equipped to work productively with these sources and give you a
    solid understanding of the existing alternatives to concepts described there.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在章节摘要中找到完整的用于实施和其他额外参考资料的算法。阅读本书应使您能够有效地与这些资源合作，并对已描述概念的现有替代方案有深入的理解。
- en: ^([1](part01.html#idm46466889878968-marker)) The service-level agreement (or
    SLA) is a commitment by the service provider about the quality of provided services.
    Among other things, the SLA can include information about latency, throughput,
    jitter, and the number and frequency of failures.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part01.html#idm46466889878968-marker)) 服务级别协议（SLA）是服务提供商对所提供服务质量的承诺。除其他事项外，SLA可以包括有关延迟、吞吐量、抖动以及故障次数和频率的信息。
