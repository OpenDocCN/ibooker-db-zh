- en: Part II. Distributed Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分。分布系统
- en: A distributed system is one in which the failure of a computer you didn’t even
    know existed can render your own computer unusable.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 分布系统是指一个你甚至不知道其存在的计算机的故障可能会使你自己的计算机无法使用。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Leslie Lamport
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 莱斯利·兰波特
- en: 'Without distributed systems, we wouldn’t be able to make phone calls, transfer
    money, or exchange information over long distances. We use distributed systems
    daily. Sometimes, even without acknowledging it: any client/server application
    is a distributed system.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有分布系统，我们将无法进行电话通话、转账或在长距离上交换信息。我们每天都在使用分布系统。有时，甚至没有意识到：任何客户端/服务器应用程序都是分布系统。
- en: 'For many modern software systems, *vertical* scaling (scaling by running the
    same software on a bigger, faster machine with more CPU, RAM, or faster disks)
    isn’t viable. Bigger machines are more expensive, harder to replace, and may require
    special maintenance. An alternative is to scale *horizontally*: to run software
    on multiple machines connected over the network and working as a single logical
    entity.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多现代软件系统来说，*垂直*扩展（在更大、更快的机器上运行相同软件，具有更多的CPU、RAM或更快的磁盘）不可行。更大的机器更昂贵，更难替换，并可能需要特殊的维护。一个替代方案是*水平*扩展：在多台通过网络连接并作为单一逻辑实体运行的机器上运行软件。
- en: Distributed systems might differ both in size, from a handful to hundreds of
    machines, and in characteristics of their participants, from small handheld or
    sensor devices to high-performance computers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 分布系统在大小上可能会有所不同，从几台到数百台机器不等，并且在参与者的特性上也可能会有所不同，从小型手持设备或传感器到高性能计算机。
- en: The time when database systems were mainly running on a single node is long
    gone, and most modern database systems have multiple nodes connected in clusters
    to increase storage capacity, improve performance, and enhance availability.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库系统主要在单节点上运行的时代早已一去不复返，大多数现代数据库系统将多个节点连接成集群，以增加存储容量、提升性能和提高可用性。
- en: Even though some of the theoretical breakthroughs in distributed computing aren’t
    new, most of their practical application happened relatively recently. Today,
    we see increasing interest in the subject, more research, and new development
    being done.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管分布式计算的一些理论突破并不新鲜，但它们的大多数实际应用是比较近期的。今天，我们看到对这一主题越来越多的兴趣，进行了更多的研究，并进行了新的开发。
- en: Part II. Basic definitions
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二部分。基本定义
- en: In a distributed system, we have several *participants* (sometimes called *processes*,
    *nodes*, or *replicas*). Each participant has its own local *state*. Participants
    communicate by exchanging *messages* using communication *links* between them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式系统中，我们有多个*参与者*（有时称为*进程*、*节点*或*副本*）。每个参与者都有自己的本地*状态*。参与者通过交换*消息*来通信，使用它们之间的通信*链接*。
- en: Processes can access the time using a *clock*, which can be *logical* or *physical*.
    Logical clocks are implemented using a kind of monotonically growing counter.
    Physical clocks, also called *wall clocks*, are bound to a notion of time in the
    physical world and are accessible through process-local means; for example, through
    an operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 进程可以使用*时钟*来访问时间，时钟可以是*逻辑*的或*物理*的。逻辑时钟使用一种单调增长的计数器来实现。物理时钟，也称为*挂钟*，与物理世界中的时间概念绑定，可以通过进程本地的方式访问；例如，通过操作系统。
- en: It’s impossible to talk about distributed systems without mentioning the inherent
    difficulties caused by the fact that its parts are located apart from each other.
    Remote processes communicate through links that can be slow and unreliable, which
    makes knowing the exact state of the remote process more complicated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 谈论分布系统时不可能不提到由于其部件分散在彼此之间而导致的固有困难。远程进程通过可能缓慢且不可靠的链接进行通信，这使得了解远程进程的确切状态变得更加复杂。
- en: 'Most of the research in the distributed systems field is related to the fact
    that nothing is entirely reliable: communication channels may delay, reorder,
    or fail to deliver the messages; processes may pause, slow down, crash, go out
    of control, or suddenly stop responding.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 分布系统领域的大部分研究与一个事实相关：没有什么是完全可靠的：通信通道可能会延迟、重新排序或无法传递消息；进程可能会暂停、放慢、崩溃、失控或突然停止响应。
- en: There are many themes in common in the fields of concurrent and distributed
    programming, since CPUs are tiny distributed systems with links, processors, and
    communication protocols. You’ll see many parallels with concurrent programming
    in [“Consistency Models”](ch11.html#consistency_models). However, most of the
    primitives can’t be reused directly because of the costs of communication between
    remote parties, and the unreliability of links and processes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 并发和分布式编程领域有许多共同主题，因为 CPU 是微小的分布式系统，具有链接、处理器和通信协议。你会在[“一致性模型”](ch11.html#consistency_models)中看到与并发编程很多相似之处。然而，由于远程各方之间通信的成本和链接及进程的不可靠性，大多数原语不能直接重用。
- en: To overcome the difficulties of the distributed environment, we need to use
    a particular class of algorithms, *distributed algorithms*, which have notions
    of local and remote state and execution and work despite unreliable networks and
    component failures. We describe algorithms in terms of *state* and *steps* (or
    *phases*), with *transitions* between them. Each process executes the algorithm
    steps locally, and a combination of local executions and process interactions
    constitutes a distributed algorithm.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要克服分布式环境的困难，我们需要使用一类特定的算法，*分布式算法*，它们具有本地和远程状态以及执行的概念，并能够在不可靠的网络和组件故障情况下工作。我们描述算法的时候使用*状态*和*步骤*（或*阶段*），它们之间有*转换*。每个进程在本地执行算法步骤，并且本地执行和进程交互的组合构成了分布式算法。
- en: Distributed algorithms describe the local behavior and interaction of multiple
    independent nodes. Nodes communicate by sending messages to each other. Algorithms
    define participant roles, exchanged messages, states, transitions, executed steps,
    properties of the delivery medium, timing assumptions, failure models, and other
    characteristics that describe processes and their interactions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式算法描述了多个独立节点的本地行为和互动。节点通过向彼此发送消息来进行通信。算法定义了参与者角色、交换的消息、状态、转换、执行的步骤、传输媒介的特性、时间假设、故障模型以及描述进程及其互动的其他特性。
- en: 'Distributed algorithms serve many different purposes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式算法用于多种不同目的：
- en: Coordination
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 协调
- en: A process that supervises the actions and behavior of several workers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 监督多个工作者的行动和行为的进程。
- en: Cooperation
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 合作
- en: Multiple participants relying on one another for finishing their tasks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 多个参与者互相依赖以完成各自的任务。
- en: Dissemination
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 传播
- en: Processes cooperating in spreading the information to all interested parties
    quickly and reliably.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 过程在快速且可靠地向所有感兴趣的方进行信息传播中合作。
- en: Consensus
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 共识
- en: Achieving agreement among multiple processes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 达成多个进程之间的协议。
- en: In this book, we talk about algorithms in the context of their usage and prefer
    a practical approach over purely academic material. First, we cover all necessary
    abstractions, the processes and the connections between them, and progress to
    building more complex communication patterns. We start with UDP, where the sender
    doesn’t have any guarantees on whether or not its message has reached its destination;
    and finally, to achieve consensus, where multiple processes agree on a specific
    value.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们讨论算法在其使用环境中的情况，并更偏向于实用而非纯学术的材料。首先，我们涵盖所有必要的抽象、进程及其之间的连接，然后逐步构建更复杂的通信模式。我们从
    UDP 开始，发送方无法保证其消息是否已达到目的地；最终，我们达成共识，多个进程就特定值达成一致。
