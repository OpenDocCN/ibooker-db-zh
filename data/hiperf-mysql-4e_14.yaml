- en: Appendix A. Upgrading MySQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 升级 MySQL
- en: Upgrading is a trade-off between stability^([1](app01.html#ch01fn91)) and features.
    You should consider this when choosing to upgrade. One of the best parts about
    using MySQL is its wide installation base. This means you get the benefit of so
    many other people testing and using MySQL. If you upgrade to too new of a version,
    you may unknowingly introduce a bug or regression into your environment. If you
    stay too far behind, you may be experiencing nonobvious bugs or won’t be able
    to take advantage of a feature that has been optimized for performance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 升级是稳定性和功能之间的权衡。在选择升级时，您应考虑这一点。使用 MySQL 的最大优势之一是其广泛的安装基础。这意味着您可以从许多其他人测试和使用 MySQL
    中获益。如果升级到太新的版本，您可能会不知不觉地引入一个错误或回归到您的环境中。如果保持太落后，您可能会遇到不明显的错误或无法利用为性能优化的功能。
- en: Why Upgrade?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么升级？
- en: Deciding to go forward with a version upgrade can be a risky process. It usually
    involves backing up all your data, testing the changes, and then running the upgrade
    process. Before we go into the details, it’s important to understand why you might
    want to upgrade.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 决定继续进行版本升级可能是一个风险的过程。通常涉及备份所有数据，测试更改，然后运行升级过程。在我们深入讨论细节之前，了解为什么您可能希望升级是很重要的。
- en: 'There are a number of reasons to upgrade:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多升级的原因：
- en: Security vulnerabilities
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 安全漏洞
- en: It has become less likely over the years, but it is still possible that people
    discover security vulnerabilities in MySQL. You or your security team may assess
    these and determine that you should perform an upgrade.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，发现 MySQL 中的安全漏洞的可能性已经减少，但仍然有可能。您或您的安全团队可能会评估这些漏洞，并确定您应该执行升级。
- en: Known bugs
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 已知错误
- en: When encountering an unknown or unexplainable behavior in production, we recommend
    finding what version of MySQL you’re running and then read the release notes for
    the subsequent versions to the latest. It is entirely possible you’ll discover
    the situation you’re experiencing is actually a software bug in MySQL. If your
    issue is covered, you may find the need to upgrade MySQL.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中遇到未知或无法解释的行为时，我们建议找出您正在运行的 MySQL 版本，然后阅读最新版本的发行说明。您完全有可能发现您正在经历的情况实际上是
    MySQL 中的软件错误。如果您的问题得到解决，您可能需要升级 MySQL。
- en: Newer features
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能
- en: MySQL doesn’t always adhere to a strict major/minor/point release strategy with
    respect to how features are added. Many people may expect that a point release
    (e.g., 8.0.21 to 8.0.22) would only contain bug fixes, and a minor version change
    (8.0 to 8.1) would include minor features. Oracle often releases new features
    in minor point releases that may have an impact on your workload. This strategy
    is a double-edged sword and why you should read all of the release notes before
    upgrading.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 在如何添加功能方面并不总是严格遵循主要/次要/点版本发布策略。许多人可能期望点版本（例如，从 8.0.21 到 8.0.22）只包含错误修复，而次要版本更改（从
    8.0 到 8.1）将包含次要功能。Oracle 经常在次要点版本中发布可能对您的工作负载产生影响的新功能。这种策略是一把双刃剑，这就是为什么在升级之前应该阅读所有的发行说明。
- en: MySQL end-of-life support
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 终止生命周期支持
- en: Oracle sets end-of-life (EOL) time frames for MySQL. In general, it is advisable
    to stay within a supported version so that, at a minimum, security fixes are still
    supported.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 为 MySQL 设置了终止生命周期（EOL）时间。一般来说，建议保持在支持的版本内，这样至少安全修复仍然受支持。
- en: Now that we have covered the various factors that are part of your decision
    to upgrade and to which specific version, let’s discuss the process for planning
    and safely completing an upgrade.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了影响您升级决定的各种因素以及具体版本，让我们讨论规划和安全完成升级的过程。
- en: Upgrade Life Cycle
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级生命周期
- en: 'Once you’ve made the decision that upgrading is the right step for you, you’ll
    typically take the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您做出升级是正确的决定，通常会采取以下步骤：
- en: Read the release notes for the version, including any minor changes.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读该版本的发行说明，包括任何次要更改。
- en: Read the upgrade notes in the official documentation.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读官方文档中的升级说明。
- en: Perform testing of the new version.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行新版本的测试。
- en: Finally, upgrade your servers.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，升级您的服务器。
- en: The release notes will often have important information like new features, changes,
    or deprecated features, and usually a list of bugs that have been fixed. The upgrade
    notes give you a detailed overview of how to perform the upgrade, and they call
    your attention to any important information that you need to know before continuing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 发行说明通常包含重要信息，如新功能、更改或已弃用的功能，通常还会列出已修复的错误。升级说明为您提供了如何执行升级的详细概述，并提醒您在继续之前需要了解的任何重要信息。
- en: In addition, you should also have a plan for what to do if you introduce issues,
    like a query begins performing poorly, or worse, you begin experiencing a crashing
    bug. For all major and minor version changes (e.g., 8.0 down to 5.7 or 5.7 down
    to 5.6), the only way to downgrade is to restore a backup from before you upgraded.
    This makes upgrading especially risky, so be sure you have a plan.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还应该制定一个计划，以应对引入问题的情况，比如查询开始表现不佳，或者更糟糕的是，您开始遇到崩溃错误。对于所有主要和次要版本更改（例如，从 8.0
    降级到 5.7 或从 5.7 降级到 5.6），唯一的降级方法是从升级之前的备份恢复。这使得升级特别危险，因此请确保您有一个计划。
- en: Warning
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: It’s important to note that since MySQL 8.0, you cannot downgrade point release
    versions either. For example, once you are running 8.0.25, you cannot downgrade
    to 8.0.24 without exporting all of your data and reimporting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，自 MySQL 8.0 起，您也不能降级点版本。例如，一旦您运行 8.0.25，您就无法降级到 8.0.24，而不导出所有数据并重新导入。
- en: Testing Upgrades
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试升级
- en: Once you’ve read the release and upgrade notes, you should have a good understanding
    of any concerns or areas of focus for testing. The next step would be to test
    how this new version will behave with your workload. You’ll also want to verify
    you’ve reviewed your configuration files. Newer versions of MySQL often rename
    variables or deprecate them entirely.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您阅读了发布和升级说明，您应该对任何测试的关注点或重点有很好的理解。下一步将是测试这个新版本在您的工作负载下的行为。您还需要验证您已经审查了配置文件。MySQL的新版本通常会重命名变量或完全弃用它们。
- en: Testing is a tricky step to accomplish, and each of the methods has caveats.
    Given the risk we cited before about downgrading, you should employ as many of
    these methods as are feasible prior to upgrading.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一个难以完成的步骤，每种方法都有注意事项。考虑到之前提到的关于降级的风险，您应该在升级之前尽可能多地采用这些方法。
- en: Development Environment Testing
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境测试
- en: Hopefully, you have a development environment for your data. This is a great
    place to begin your testing, either on a shared development database or on a standalone
    one for you. The main goal of using this is to surface any obvious issues with
    syntax. Most development environments do not contain the same size production
    data, so it can be difficult to run accurate testing. For example, you may run
    your commonly used queries and see that they’re fine because they access only
    10 rows in a table. When you go to production, with 10 million rows in the same
    table, you may see a regression.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您有一个用于数��的开发环境。这是开始测试的好地方，可以在共享开发数据库上进行测试，也可以在独立数据库上进行测试。使用这个的主要目标是发现任何明显的语法问题。大多数开发环境不包含与生产数据相同大小的数据，因此很难进行准确的测试。例如，您可能运行您常用的查询并看到它们正常，因为它们只访问表中的10行。当您转到生产环境时，表中有1000万行，您可能会看到退化。
- en: Production Mirror
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产镜像
- en: Another option would be to create a copy of your production data and send a
    copy of your SQL traffic to it. This method was showcased in [a blog post on Etsy’s
    Code As Craft blog](https://oreil.ly/yByfy). In short, you have a second copy
    of your production database, cease using replication, and upgrade MySQL on the
    copy. Once complete, send traffic to both your live production system *and* the
    copy using a combination of *tcpdump* and *pt-query-digest*. Your application
    is still using only the production system for live traffic while the copy with
    the upgraded version can give you performance metrics and surface errors in syntax.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是创建生产数据的副本，并将您的SQL流量发送到副本。这种方法在[Etsy的Code As Craft博客上的一篇博文](https://oreil.ly/yByfy)中展示过。简而言之，您有生产数据库的第二个副本，停止使用复制，并在副本上升级MySQL。完成后，使用*tcpdump*和*pt-query-digest*的组合将流量发送到您的实时生产系统*和*副本。您的应用程序仍然仅使用生产系统进行实时流量，而具有升级版本的副本可以为您提供性能指标并显示语法错误。
- en: Replica
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 副本
- en: If your topology has read replicas and you have the ability to depool the replica,
    you could consider upgrading one of the replicas first. This would allow you to
    see how your read traffic performs with an actual production workload. If you
    observe errors or regressions, you can depool the replica and make adjustments.
    The downside of this method is that you cannot test performance or write traffic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的拓扑结构有读取副本并且您有能力将副本脱离池，您可以考虑首先升级其中一个副本。这将允许您查看实际生产工作负载下的读取流量表现。如果观察到错误或退化，您可以将副本脱离池并进行调整。这种方法的缺点是您无法测试性能或写入流量。
- en: Tooling
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: Percona Toolkit offers the tool *pt-upgrade*, which takes an input of queries,
    runs them against two different targets, and produces a report telling you about
    any differences in row counts, row data, or errors. Since it can take many different
    types of input (slow query log, general query log, binary logs), it can be a good
    option to get additional test coverage.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Percona Toolkit提供了工具*pt-upgrade*，它接受查询作为输入，针对两个不同的目标运行这些查询，并生成报告告诉您行数、行数据或错误的任何差异。由于它可以接受许多不同类型的输入（慢查询日志、常规查询日志、二进制日志），它可以是获得额外测试覆盖的好选择。
- en: The best way to use this would be to first collect the queries you are most
    interested in, with either the slow query log or the binary log. Then set up two
    identical systems, upgrade only one of them to your new version, and run *pt-upgrade*
    against both to see the differences.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳使用方法是首先收集您最感兴趣的查询，可以使用慢查询日志或二进制日志。然后设置两个相同的系统，仅将其中一个升级到新版本，并对两者运行*pt-upgrade*以查看差异。
- en: Upgrading at Scale
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模升级
- en: Upgrading MySQL is very straightforward and is covered thoroughly in the official
    MySQL documentation. In brief, if you’re doing an in-place upgrade, you’ll stop
    MySQL, replace the binaries, start MySQL, and then run the `mysql_upgrade` script.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 升级MySQL非常简单，并且在官方MySQL文档中有详细介绍。简而言之，如果您正在进行原地升级，您将停止MySQL，替换二进制文件，启动MySQL，然后运行`mysql_upgrade`脚本。
- en: This can be repetitive if you’re doing this on a fleet of hundreds of MySQL
    servers. Our suggestion would be to automate this as much as possible. One way
    you can do this is with Ansible.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在数百个MySQL服务器上执行此操作，这可能会变得重复。我们建议尽可能自动化这个过程。您可以使用Ansible的一种方式来实现这一点。
- en: 'Here’s a suggested skeleton process for performing safe upgrades that you can
    use as a guide to build an Ansible playbook, if you choose to:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个建议的安全升级过程的骨架，您可以将其用作构建Ansible playbook的指南，如果您选择的话：
- en: 1\. Verify target.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 验证目标。
- en: The very first thing you want to do is prevent any accidental upgrades of production
    systems. If you have a system that you can query to determine whether a database
    is actively taking traffic, this is the place to check it. If you followed our
    advice from [Chapter 5](ch05.html#optimizing_server_settings), you should be using
    the `read_only` flag to prevent unexpected writes to your replicas. This can serve
    as a good alternative if you don’t have a system that you can check. If a server
    is writable, chances are you don’t want to upgrade it since it may be taking production
    writes. You can also use this step to verify that you haven’t already upgraded
    the server. This allows you to run the playbook against it later and it will take
    no action.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你要做的第一件事是防止生产系统的意外升级。如果您有一个可以查询以确定数据库是否正在接收流量的系统，这是检查的地方。如果您遵循我们在[第5章](ch05.html#optimizing_server_settings)的建议，应该使用`read_only`标志来防止对副本的意外写入。如果没有可以检查的系统，这可以作为一个很好的替代方案。如果服务器是可写的，那么您可能不希望对其进行升级，因为它可能正在接收生产写入。您还可以使用此步骤验证您是否已经升级了服务器。这样可以稍后对其运行playbook，而它将不执行任何操作。
- en: 2\. Set downtime.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 设置停机状态。
- en: Hopefully, your systems are being monitored. The next step involves setting
    some form of downtime or alert suppression so that you don’t get paged for the
    step where MySQL is restarted on the new version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你的系统正在被监控。下一步涉及设置某种形式的停机或警报抑制，以便在 MySQL 在新版本上重新启动时不会收到警报。
- en: 3\. Other preconditions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 其他前提条件。
- en: If you have any other dependent services, like a configuration management tool
    or other monitoring tools that will generate errors while MySQL is offline, now
    is a good time to shut them down.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何其他依赖服务，比如配置管理工具或其他监控工具，在 MySQL 离线时会生成错误，现在是关闭它们的好时机。
- en: 4\. Remove old packages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 删除旧包。
- en: Our preferred method is to completely remove any installed packages for MySQL
    at this point. This helps avoid any conflicting packages for major versions (5.7
    to 8.0).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首选的方法是此时完全删除任何已安装的 MySQL 包。这有助于避免主要版本（5.7 到 8.0）之间的任何冲突包。
- en: 5\. Install new packages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 安装新包。
- en: Next, you’ll want to install the new packages onto your system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将希望在系统上安装新包。
- en: 6\. Start `mysqld`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 启动 `mysqld`。
- en: Start the `mysqld` service.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`mysqld`服务。
- en: 7\. Run `mysql_upgrade`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 运行 `mysql_upgrade`。
- en: If older than MySQL 8.0,^([2](app01.html#ch01fn92)) run the `mysql_upgrade`
    process. As a special note, if you run MySQL with `super_read_only` like we recommend,
    you’ll want to set it to `OFF` for the `mysql_upgrade` step.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果早于 MySQL 8.0，^([2](app01.html#ch01fn92))运行`mysql_upgrade`过程。特别注意，如果您像我们建议的那样使用`super_read_only`运行
    MySQL，则在`mysql_upgrade`步骤中将其设置为`OFF`。
- en: 8\. Restart `mysqld`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 重新启动 `mysqld`。
- en: We prefer to give a clean restart to `mysqld` at this point. This will ensure
    that it starts up correctly with the upgraded files and that your configuration
    files are also working.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢在此时对`mysqld`进行干净重启。这将确保它正确启动并使用升级后的文件，并且您的配置文件也在工作。
- en: 9\. Verify you can connect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 验证您可以连接。
- en: Simply connect and run a `SELECT 1` to ensure that MySQL is up and working.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 简单连接并运行`SELECT 1`以确保 MySQL 正常工作。
- en: 10\. Restore any disabled services.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 恢复任何已禁用的服务。
- en: If you turned off any configuration management or monitoring tools, enable them
    again.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关闭了任何配置管理或监控工具，请重新启用它们。
- en: 11\. Clear downtime.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 清除停机状态。
- en: Take your server out of downtime so you can observe if there are any that failed
    the upgrade process.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务器从停机状态中取出，以便观察是否有任何升级过程失败的情况。
- en: With this process, you’re able to point your runbook at any server and only
    upgrade the nonupgraded nodes that are not taking traffic.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个过程，您可以将您的运行手册指向任何服务器，并仅升级不接收流量的未升级节点。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: There are many reasons for upgrading MySQL, the most compelling being fixes
    to a bug you are actively experiencing or being able to leverage a new feature.
    For example, MySQL 8.0 introduced a feature for InnoDB where columns can be added
    instantly—no need to rebuild the entire table. This type of feature enhancement
    can be a huge time saver for companies that perform a high volume of `ALTER TABLE
    .. ADD COLUMN` statements. The effort you put into working through a safe upgrade
    process will eventually pay itself back in time saved performing those column
    add statements as well as an improved developer experience.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 MySQL 有许多原因，最引人注目的是修复您正在遇到的错误或利用新功能。例如，MySQL 8.0 引入了一个功能，InnoDB 可以立即添加列，无需重建整个表。这种功能增强对于执行大量`ALTER
    TABLE .. ADD COLUMN`语句的公司来说可以节省大量时间。通过努力进行安全升级过程，最终将节省执行这些列添加语句的时间，以及改进开发人员体验。
- en: Major version upgrades can be daunting, however. You should absolutely put a
    lot of effort into testing your upgrades for any adverse effects. Typically, you
    want to check for any query latency deviations or new errors as a result of an
    upgrade. Once you gain confidence, roll things out slowly and have a rollback
    process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 主要版本升级可能令人生畏。您绝对应该花费大量精力测试升级是否会产生任何不良影响。通常，您希望检查升级是否导致任何查询延迟偏差或新错误。一旦您获得信心，慢慢推出并具有回滚过程。
- en: Lastly, if you have a large fleet of servers to manage, consider investing heavily
    in automating the process as best as possible. Automation can make the upgrade
    process easily repeatable and more time efficient than logging in to each server
    directly, and it runs a slightly lower chance of typos and accidental downtime
    from being on the wrong server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您有大量服务器需要管理，请考虑大力投资于尽可能自动化该过程。自动化可以使升级过程变得更容易重复，并比直接登录每台服务器更节省时间，也减少了因在错误服务器上而导致的拼写错误和意外停机的几���。
- en: '^([1](app01.html#ch01fn91-marker)) Stewart Smith, a long-time MySQL community
    member, famously coined the dot-20 rule: “[The rule] is that a piece of software
    is never really mature until a dot-20 release.” While this isn’t a hard-and-fast
    rule, it does highlight the trade-off between new releases and stability.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](app01.html#ch01fn91-marker)) 长期参与 MySQL 社区的成员 Stewart Smith，著名地提出了点二十规则：“[规则]
    是指软件在发布点二十版本之前永远不会真正成熟。”虽然这不是一个严格的规则，但它突显了新版本和稳定性之间的权衡。
- en: ^([2](app01.html#ch01fn92-marker)) MySQL 8.0 moved the `mysql_upgrade` process
    into the startup of the server itself. There is no need to run this as an additional
    step.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](app01.html#ch01fn92-marker)) MySQL 8.0 将 `mysql_upgrade` 过程移入了服务器启动过程中。无需作为额外步骤运行。
