- en: Chapter 18\. Seeing What Your Application Is Doing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章 查看应用程序的运行情况
- en: 'Once you have an application up and running, how do you know what it’s doing?
    This chapter covers how to figure out what kinds of queries MongoDB is running,
    how much data is being written, and other details about what it’s actually doing.
    You’ll learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序启动运行，如何知道它在做什么？ 本章介绍了如何查明 MongoDB 运行哪些查询、写入了多少数据以及有关实际运行情况的其他细节。 您将了解以下内容：
- en: Finding slow operations and killing them
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找慢速操作并终止它们
- en: Getting and interpreting statistics about your collections and databases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取和解释有关集合和数据库的统计信息
- en: Using command-line tools to give you a picture of what MongoDB is doing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具来获取 MongoDB 正在执行的情况
- en: Seeing the Current Operations
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看当前操作
- en: An easy way to find slow operations is to see what is running. Anything slow
    is more likely to show up and have been running for longer. It’s not guaranteed,
    but it’s a good first step to see what might be slowing down an application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 查找运行中的操作的简便方法是查看运行情况。 任何慢速操作更可能显示出来，并且可能运行时间更长。 虽然不能保证，但这是查找可能减缓应用程序的第一步。
- en: 'To see the operations that are running, use the `db.currentOp()` function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看正在运行的操作，请使用 `db.currentOp()` 函数：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This displays a list of operations that the database is performing. Here are
    some of the more important fields in the output:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示数据库正在执行的操作列表。 以下是输出中一些较重要的字段：
- en: '`"opid"`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`"opid"`'
- en: The operation’s unique identifier. You can use this number to kill an operation
    (see [“Killing Operations”](#sect2-killing)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的唯一标识符。 您可以使用此编号来终止一个操作（参见 [“终止操作”](#sect2-killing)）。
- en: '`"active"`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`"active"`'
- en: Whether this operation is running. If this field is `false`, it means the operation
    has yielded or is waiting for a lock.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作是否正在运行。 如果此字段为 `false`，则意味着操作已放弃或正在等待锁。
- en: '`"secs_running"`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`"secs_running"`'
- en: The duration of this operation in seconds. You can use this to find queries
    that are taking too long.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作持续的秒数。 您可以使用此操作查找执行时间过长的查询。
- en: '`"microsecs_running"`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`"microsecs_running"`'
- en: The duration of this operation in microseconds. You can use this to find queries
    that are taking too long.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作持续的微秒数。 您可以使用此操作查找执行时间过长的查询。
- en: '`"op"`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`"op"`'
- en: The type of operation. This is generally `"query"`, `"insert"`, `"update"`,
    or `"remove"`. Note that database commands are processed as queries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 操作类型。 一般为 `"query"`、`"insert"`、`"update"` 或 `"remove"`。 请注意，数据库命令将作为查询处理。
- en: '`"desc"`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`"desc"`'
- en: An identifier for the client. This can be correlated with messages in the logs.
    Every log message related to the connection in our example will be prefixed with
    `[conn3]`, so you can use this to grep the logs for relevant information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端的标识符。 这可以与日志中的消息相关联。 我们示例中与连接相关的每条日志消息都将以 `[conn3]` 作为前缀，因此您可以使用它来在日志中搜索相关信息。
- en: '`"locks"`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`"locks"`'
- en: A description of the types of locks taken by this operation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作获取的锁类型的描述。
- en: '`"waitingForLock"`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`"waitingForLock"`'
- en: Whether this operation is currently blocking, waiting to acquire a lock.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作当前是否正在阻塞，等待获取锁。
- en: '`"numYields"`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`"numYields"`'
- en: The number of times this operation has yielded, releasing its lock to allow
    other operations to go. Generally, any operation that searches for documents (queries,
    updates, and removes) can yield. An operation will only yield if there are other
    operations enqueued and waiting to take its lock. Basically, if there are no operations
    in the `"waitingForLock"` state, the current operations will not yield.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作放弃其锁以允许其他操作继续的次数。 一般来说，任何搜索文档（查询、更新和删除）的操作都可以放弃。 只有在排队等待获取锁的其他操作时，操作才会放弃。
    基本上，如果没有处于`"waitingForLock"`状态的操作，则当前操作将不会放弃。
- en: '`"lockstats.timeAcquiringMicros"`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`"lockstats.timeAcquiringMicros"`'
- en: How long it took this operation to acquire the locks it needed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 操作需要获取所需锁的等待时间。
- en: 'You can filter `currentOp` to only look for operations fulfilling certain criteria,
    such as operations on a certain namespace or ones that have been running for a
    certain length of time. You filter the results by passing in a query argument:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `currentOp` 过滤为仅查找满足特定条件的操作，例如在特定命名空间上的操作或已运行了一定时间的操作。 您可以通过传递查询参数来过滤结果：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can query on any field in `currentOp`, using all the normal query operators.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `currentOp` 中查询任何字段，使用所有常规的查询操作符。
- en: Finding Problematic Operations
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找问题操作
- en: The most common use for `db.currentOp()` is looking for slow operations. You
    can use the filtering technique described in the previous section to find all
    queries that take longer than a certain amount of time, which may suggest a missing
    index or improper field filtering.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.currentOp()` 的最常见用法是查找慢操作。你可以使用前面章节描述的过滤技术来查找所有执行时间超过一定阈值的查询，这可能暗示缺少索引或不正确的字段过滤。'
- en: Sometimes people will find that unexpected queries are running, generally because
    there’s an app server running an old or buggy version of the software. The `"client"`
    field can help you track down where unexpected operations are coming from.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时人们会发现意外的查询在运行，通常是因为某个应用服务器运行了旧版或有 bug 的软件。`"client"` 字段可以帮助你追踪意外操作的来源。
- en: Killing Operations
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终止操作
- en: 'If you find an operation that you want to stop, you can kill it by passing
    `db.killOp()` its `"opid"`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找到一个想要停止的操作，你可以通过传递`db.killOp()`的`"opid"`来杀死它：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Not all operations can be killed. In general, operations can only be killed
    when they yield—so updates, finds, and removes can all be killed, but operations
    holding or waiting for a lock usually cannot be killed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有操作都可以被终止。一般来说，只有在操作让出时才能终止它们——所以更新、查找和删除都可以被终止，但通常无法终止持有或等待锁的操作。
- en: Once you have sent a “kill” message to an operation, it will have a `"killed"`
    field in the `db.currentOp()` output. However, it won’t actually be dead until
    it disappears from the list of current operations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你向一个操作发送了“kill”消息，它在`db.currentOp()`输出中将会有一个`"killed"`字段。但直到它从当前操作列表中消失之前，它实际上并没有死亡。
- en: In MongoDB 4.0, the `killOP` method was extended to allow it to run on a *mongos*.
    It can now kill queries (read operations) that are running across more than one
    shard in a cluster. In previous versions, this involved manually issuing the kill
    command across each shard on the respective primary *mongod*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MongoDB 4.0 中，`killOP` 方法已扩展以允许在*mongos*上运行。它现在可以终止在集群中跨多个分片运行的查询（读操作）。在之前的版本中，这需要手动在每个分片的主
    *mongod* 上发出终止命令。
- en: False Positives
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 误报
- en: If you look for slow operations, you may see some long-running internal operations
    listed. There are several long-running requests MongoDB may have running, depending
    on your setup. The most common are the replication thread (which will continue
    fetching more operations from the sync source for as long as possible) and the
    writeback listener for sharding. Any long-running query on *local.oplog.rs* can
    be ignored, as well as any [*writebacklistener* commands](https://oreil.ly/95e3x).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查找慢操作，可能会看到一些长时间运行的内部操作被列出。根据你的设置，MongoDB 可能有几个长时间运行的请求。最常见的是复制线程（它将继续从同步源获取更多操作，尽可能长时间运行）和用于分片的写回监听器。可以忽略任何在*local.oplog.rs*上长时间运行的查询，以及任何[*writebacklistener*命令](https://oreil.ly/95e3x)。
- en: If you kill either of these operations, MongoDB will just restart them. However,
    you generally should not do that. Killing the replication thread will briefly
    halt replication, and killing the writeback listener may cause *mongos* to miss
    legitimate write errors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你终止这些操作中的任意一个，MongoDB 将会重新启动它们。但一般情况下不建议这样做。终止复制线程将会暂时停止复制，而终止写回监听器可能导致*mongos*错过合法的写入错误。
- en: Preventing Phantom Operations
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止幽灵操作
- en: There is an odd, MongoDB-specific issue that you may run into, particularly
    if you’re bulk-loading data into a collection. Suppose you have a job that is
    firing thousands of update operations at MongoDB and MongoDB is grinding to a
    halt. You quickly stop the job and kill off all the updates that are currently
    occurring. However, you continue to see new updates appearing as soon as you kill
    the old ones, even though the job is no longer running!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个奇怪的、特定于 MongoDB 的问题，你可能会遇到，特别是当你将数据大批量加载到一个集合中时。假设你有一个作业正在向 MongoDB 发送数千个更新操作，并且
    MongoDB 几乎停顿下来了。你迅速停止了作业并杀死了所有当前正在进行的更新。然而，即使作业不再运行，你仍然会看到新的更新操作出现在你杀死旧操作之后！
- en: If you are loading data using unacknowledged writes, your application will fire
    writes at MongoDB, potentially faster than MongoDB can process them. If MongoDB
    gets backed up, these writes will pile up in the operating system’s socket buffer.
    When you kill the writes MongoDB is working on, this allows MongoDB to start processing
    the writes in the buffer. Even if you stop the client from sending writes, any
    writes that made it into the buffer will get processed by MongoDB, since they’ve
    already been “received” (just not processed).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用未确认的写入加载数据，您的应用程序可能会比MongoDB更快地向其发送写入请求。如果MongoDB被堵塞，这些写入将堆积在操作系统的套接字缓冲区中。当您终止MongoDB正在处理的写入时，这将允许MongoDB开始处理缓冲区中的写入。即使停止客户端发送写入，任何进入缓冲区的写入也将由MongoDB处理，因为它们已经“接收到”（只是尚未处理）。
- en: 'The best way to prevent these phantom writes is to do *acknowledged* writes:
    make each write wait until the previous write is complete, not just until the
    previous write is sitting in a buffer on the database server.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止这些幻写的最佳方法是进行*确认的*写入：确保每次写入都等到前一次写入完成，而不仅仅是等到前一次写入已经在数据库服务器的缓冲区中。
- en: Using the System Profiler
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用系统分析器
- en: 'To find slow operations you can use the system profiler, which records operations
    in a special *system.profile* collection. The profiler can give you tons of information
    about operations that are taking a long time, but at a cost: it slows down *mongod*’s
    overall performance. Thus, you may only want to turn on the profiler periodically
    to capture a slice of traffic. If your system is already heavily loaded, you may
    wish to use another technique described in this chapter to diagnose issues.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找慢速操作，您可以使用系统分析器，它会记录一个特殊的*system.profile*集合中的操作。分析器可以为您提供大量关于长时间操作的信息，但这也会带来代价：它会减慢*mongod*的整体性能。因此，您可能只想定期打开分析器来捕获部分流量。如果系统已经负载过重，您可能希望使用本章描述的其他技术来诊断问题。
- en: 'By default, the profiler is off and does not record anything. You can turn
    it on by running `db.setProfilingLevel()` in the shell:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，分析器处于关闭状态，并且不记录任何内容。您可以通过在shell中运行`db.setProfilingLevel()`来打开它：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Level 2 means “profile everything.” Every read and write request received by
    the database will be recorded in the *system.profile* collection of the current
    database. Profiling is enabled per-database and incurs a heavy performance penalty:
    every write has to be written an extra time and every read has to take a write
    lock (because it must write an entry to the *system.profile* collection). However,
    it will give you an exhaustive listing of what your system is doing:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 级别2表示“profile everything”。数据库接收的每个读取和写入请求都将记录在当前数据库的*system.profile*集合中。分析是按数据库启用的，并且会产生严重的性能损失：每次写入都必须额外写入一次，每次读取都必须获取写入锁（因为它必须将条目写入*system.profile*集合）。但它将为您提供系统正在做什么的详尽列表：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can use the `"client"` field to see which users are sending which operations
    to the database. If you’re using authentication, you can see which user is doing
    each operation, too.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`"client"`字段查看哪些用户将哪些操作发送到数据库。如果使用了身份验证，您还可以看到每个操作由哪个用户执行。
- en: 'Often, you do not care about most of the operations that your database is doing,
    just the slow ones. For this, you can set the profiling level to 1\. By default,
    level 1 profiles operations that take longer than 100 ms. You can also specify
    a second argument, which defines what “slow” means to you. This would record all
    operations that took longer than 500 ms:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您可能不关心数据库正在进行的大多数操作，只关心慢速操作。为此，您可以将分析级别设置为1。默认情况下，级别1会记录持续时间超过100毫秒的操作。您还可以指定第二个参数，定义对您而言什么是“慢速”操作。这将记录所有持续时间超过500毫秒的操作：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To turn profiling off, set the profiling level to 0:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭分析，将分析级别设置为0：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It’s generally not a good idea to set `slowms` to a low value. Even with profiling
    off, `slowms` has an effect on *mongod*: it sets the threshold for printing slow
    operations in the log. Thus, if you set `slowms` to `2`, every operation that
    takes longer than 2 ms will show up in the log, even with profiling off. So, if
    you lower `slowms` to profile something, you might want to raise it again before
    turning off profiling.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不建议将`slowms`设置为一个较低的值。即使关闭了分析，`slowms`也会对*mongod*产生影响：它设置在日志中打印慢速操作的阈值。因此，如果将`slowms`降低以进行分析，然后关闭分析之前可能需要将其提高。
- en: 'You can see the current profiling level with `db.getProfilingLevel()`. The
    profiling level is not persistent: restarting the database clears the level.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`db.getProfilingLevel()`来查看当前的分析级别。分析级别不是持久的：重新启动数据库会清除级别。
- en: There are command-line options for configuring the profiling level, namely ``--profile
    *`level`*`` and ``--slowms *`time`*``, but bumping up the profiling level is generally
    a temporary debugging measure, not something you want to add to your configuration
    long-term.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有用于配置分析级别的命令行选项，即``--profile *`level`*``和``--slowms *`time`*``，但增加分析级别通常是一种临时调试措施，不是长期配置的内容。
- en: In MongoDB 4.2, profiler entries and diagnostic log messages were extended for
    read/write operations to help improve the identification of slow queries, with
    the addition of the `queryHash` and `planCacheKey` fields. The `queryHash` string
    represents a hash of the query shape and is dependent only on the query shape.
    Each query shape is associated with a `queryHash`, making it easier to highlight
    those queries using the same shape. The `planCacheKey` is the hash of the key
    for the plan cache entry associated with the query. It includes the details of
    both the query shape and the currently available indexes for the shape. These
    help you correlate the available information from the profiler to assist with
    query performance diagnosis.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB 4.2中，扩展了读/写操作的分析器条目和诊断日志消息，以帮助改进慢查询的识别，增加了`queryHash`和`planCacheKey`字段。`queryHash`字符串表示查询形状的哈希，仅依赖于查询形状。每个查询形状都与一个`queryHash`相关联，这样可以更容易地突出显示使用相同形状的查询。`planCacheKey`是与查询关联的计划缓存条目的关键的哈希。它包括查询形状的详细信息以及当前可用的索引的详细信息。这些帮助您将分析器的可用信息与查询性能诊断相关联。
- en: If you turn on profiling and the *system.profile* collection does not already
    exist, MongoDB creates a small capped collection for it (a few megabytes in size).
    If you want to run the profiler for an extended period of time, this may not be
    enough space for the number of operations you need to record. You can make a larger
    *system.profile* collection by turning off profiling, dropping the *system.profile*
    collection, and creating a new *system.profile* capped collection that is the
    size you desire. Then enable profiling on the database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启用了性能分析，并且*system.profile*集合尚不存在，MongoDB会为其创建一个小的固定大小集合（几兆字节）。如果您希望长时间运行分析器，则这可能不足以记录您需要记录的操作数量。您可以通过关闭分析、删除*system.profile*集合，并创建所需大小的新*system.profile*固定大小集合来创建一个较大的*system.profile*集合。然后在数据库上启用分析。
- en: Calculating Sizes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算大小
- en: In order to provision the correct amount of disk and RAM, it is useful to know
    how much space documents, indexes, collections, and databases are taking up. See
    [“Calculating the Working Set”](ch22.xhtml#working-set) for information on calculating
    your working set.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确配置磁盘和RAM的数量，了解文档、索引、集合和数据库占用的空间是很有用的。参见[“计算工作集”](ch22.xhtml#working-set)以获取有关计算工作集的信息。
- en: Documents
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: The easiest way to get the size of a document is to use the shell’s `Object.bsonsize()`
    function. Pass in any document to get the size it would be when stored in MongoDB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 获取文档大小的最简单方法是使用Shell的`Object.bsonsize()`函数。传入任何文档即可获取存储在MongoDB中时的大小。
- en: 'For example, you can see that storing `_id`s as `ObjectId`s is more efficient
    than storing them as strings:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以看到将`_id`存储为`ObjectId`比存储为字符串更有效：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'More practically, you can pass in documents directly from your collections:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更实际地说，您可以直接从您的集合中传入文档：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This shows you exactly how many bytes a document is taking up on disk. However,
    this does not count padding or indexes, which can often be significant factors
    in the size of a collection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了文档在磁盘上占用了多少字节。然而，这并不包括填充或索引的计数，这些通常是集合大小的重要因素之一。
- en: Collections
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: 'For seeing information about a whole collection, there is a `stats` function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看整个集合的信息，可以使用`stats`函数：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`stats` starts with the namespace (`"sample_mflix.movies"`) and then the count
    of all documents in the collection. The next couple of fields have to do with
    the size of the collection. `"size"` is what you’d get if you called `Object.bsonsize()`
    on each element in the collection and added up all the sizes: it’s the actual
    number of bytes in memory the documents in the collection are taking up when uncompressed.
    Equivalently, if you take the `"avgObjSize"` and multiply it by `"count"`, you’ll
    get `"size"` uncompressed in memory.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`stats`从命名空间（`"sample_mflix.movies"`）开始，接着是集合中所有文档的计数。接下来的几个字段涉及集合的大小。`"size"`是调用每个元素的`Object.bsonsize()`时得到的值总和：这是未压缩时集合文档在内存中占用的实际字节数。类似地，如果将`"avgObjSize"`乘以`"count"`，你将得到未压缩的`"size"`内存中的值。'
- en: As mentioned earlier, a total count of the documents’ bytes leaves out the space
    saved by compressing a collection. `"storageSize"` can be a smaller figure than
    `"size"`, reflecting the space saved by compression.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前文所述，仅统计文档字节总数并未计算集合压缩后的节省空间。`"storageSize"`可能比`"size"`小，反映了通过压缩节省的空间。
- en: '`"nindexes"` is the number of indexes on the collection. An index is not counted
    in `"nindexes"` until it finishes being built and cannot be used until it appears
    in this list. In general, indexes will be a lot larger than the amount of data
    they store. You can minimize this free space by having right-balanced indexes
    (as described in [“Introduction to Compound Indexes”](ch05.xhtml#sec2-compound)).
    Indexes that are randomly distributed will generally be approximately 50% free
    space, whereas ascending-order indexes will be 10% free space.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`"nindexes"`是集合上的索引数。索引在建立完成之前不计入`"nindexes"`，并且在此列表中出现之前不能使用。通常，索引会比它们存储的数据量大得多。通过使用右平衡索引（如[“复合索引简介”](ch05.xhtml#sec2-compound)中所述），可以最小化这种空闲空间。随机分布的索引通常会有约50%的空闲空间，而升序索引会有10%的空闲空间。'
- en: 'As your collections get bigger, it may become difficult to read `stats` output
    with sizes in the billions of bytes or beyond. Thus, you can pass in a scaling
    factor: `1024` for kilobytes, `1024*1024` for megabytes, and so on. For example,
    this would get the collection stats in terabytes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的集合变得越来越大，可能会发现阅读`stats`输出变得困难，因为其尺寸可能达到数十亿字节甚至更大。因此，你可以传入一个缩放因子：`1024`表示千字节，`1024*1024`表示兆字节，以此类推。例如，以下命令将以
    TB 单位获取集合的统计信息：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Databases
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: 'Databases have a `stats` function that’s similar to collections’:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库有一个类似于集合的`stats`函数：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, we have the name of the database, the number of collections it contains,
    and the number of views for the database. `"objects"` is the total count of documents
    across all collections in this database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有数据库的名称、其包含的集合数量以及数据库的视图数。`"objects"`是此数据库中所有集合中文档的总数。
- en: 'The bulk of the document contains information about the size of your data.
    `"fsTotalSize"` should always be the largest: it is the total size of the disk
    capacity on the filesystem where the MongoDB instance stores data. `"fsUsedSize"`
    represents the total space used in that filesystem by MongoDB currently. This
    should correspond to the total space used by all the files in your data directory.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的大部分包含关于数据大小的信息。`"fsTotalSize"`应始终最大：它是 MongoDB 实例存储数据的文件系统的总容量大小。`"fsUsedSize"`表示目前
    MongoDB 在该文件系统中使用的总空间。这应该对应于数据目录中所有文件使用的总空间。
- en: The next-largest field is generally going to be `"dataSize"`, which is the size
    of the uncompressed data held in this database. This doesn’t match `"storageSize"`
    because data is typically compressed in WiredTiger. `"indexSize"` is the amount
    of space all of the indexes for this database take up.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来最大的字段通常会是`"dataSize"`，它是此数据库中保存的未压缩数据的大小。这与`"storageSize"`不匹配，因为在WiredTiger中数据通常是压缩的。`"indexSize"`是此数据库所有索引占用的空间大小。
- en: '`db.stats()` can take a scale argument the same way that the collections’ `stats`
    function can. If you call `db.stats()` on a nonexistent database, the values will
    all be zero.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.stats()`可以像集合的`stats`函数一样接受一个缩放参数。如果在不存在的数据库上调用`db.stats()`，则所有值都将为零。'
- en: Keep in mind that listing databases on a system with a high lock percent can
    be very slow and block other operations. Avoid doing it, if possible.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在高锁定百分比系统上列出数据库可能会非常缓慢，并阻塞其他操作。如果可能的话，请避免执行此操作。
- en: Using mongotop and mongostat
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 mongotop 和 mongostat
- en: MongoDB comes with a few command-line tools that can help you determine what
    it’s doing by printing stats every few seconds.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 配备了几个命令行工具，可以通过每隔几秒钟打印统计信息来帮助您确定它正在执行的操作。
- en: 'mongotop is similar to the *top* Unix utility: it gives you an overview of
    which collections are busiest. You can also run `mongotop --locks` to give you
    locking statistics for each database.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: mongotop 类似于 Unix 的 *top* 实用程序：它提供了最繁忙的集合概览。您还可以运行 `mongotop --locks` 来获取每个数据库的锁定统计信息。
- en: 'mongostat gives server-wide information. By default, `mongostat` prints out
    a list of statistics once per second, although this is configurable by passing
    a different number of seconds on the command line. Each of the fields gives a
    count of how many times the activity has happened since the field was last printed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: mongostat 提供了全局服务器信息。默认情况下，`mongostat` 每秒打印一次统计信息，但可以通过命令行传递不同的秒数进行配置。每个字段显示的是自上次打印以来活动发生的次数：
- en: '`insert/query/update/delete/getmore/command`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert/query/update/delete/getmore/command`'
- en: Simple counts of how many of each of these operations there have been.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每种操作的简单计数。
- en: '`flushes`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`flushes`'
- en: How many times *mongod* has flushed data to disk.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongod* 将数据刷新到磁盘的次数。'
- en: '`mapped`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapped`'
- en: The amount of memory *mongod* has mapped. This is generally roughly the size
    of your data directory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongod* 映射的内存量。通常大致等于您的数据目录的大小。'
- en: '`vsize`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`vsize`'
- en: The amount of virtual memory *mongod* is using. This is generally twice the
    size of your data directory (once for the mapped files, once again for journaling).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongod* 正在使用的虚拟内存量。这通常是数据目录大小的两倍（一次用于映射文件，再次用于日志记录）。'
- en: '`res`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`res`'
- en: The amount of memory *mongod* is using. This should generally be as close as
    possible to all the memory on the machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongod* 正在使用的内存量。这通常应尽可能接近机器上所有内存的总量。'
- en: '`locked db`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`locked db`'
- en: The database that spent the most time locked in the last timeslice. This field
    reports the percent of time the database was locked combined with how long the
    global lock was held, meaning that this value might be over 100%.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的时间片中锁定时间最长的数据库。此字段报告了数据库被锁定的时间百分比，以及全局锁定持续的时间，因此该值可能超过100%。
- en: '`idx miss %`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`idx miss %`'
- en: The percentage of index accesses that had to page fault (because the index entry
    or section of index being searched was not in memory, so *mongod* had to go to
    disk). This is the most confusingly named field in the output.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 索引访问百分比，由于索引条目或搜索的索引部分不在内存中（因此 *mongod* 必须访问磁盘），导致页面错误。这是输出中最令人困惑的字段。
- en: '`qr|qw`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`qr|qw`'
- en: The queue size for reads and writes (i.e., how many reads and writes are blocking,
    waiting to be processed).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入队列的大小（即有多少读取和写入操作正被阻塞等待处理）。
- en: '`ar|aw`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`ar|aw`'
- en: How many active clients there are (i.e., clients currently performing reads
    and writes).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当前活跃客户端数量（即当前执行读取和写入操作的客户端数）。
- en: '`netIn`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`netIn`'
- en: The number of network bytes in, as counted by MongoDB (not necessarily the same
    as what the OS would measure).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 计算的网络字节输入量（与操作系统测量的不一定相同）。
- en: '`netOut`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`netOut`'
- en: The number of network bytes out, as counted by MongoDB.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 计算的网络字节输出量。
- en: '`conn`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`conn`'
- en: The number of connections this server has open, both incoming and outgoing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务器打开的连接数，包括传入和传出的连接。
- en: '`time`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`'
- en: The time at which these statistics were taken.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 统计数据获取时的时间。
- en: You can run *mongostat* on a replica set or sharded cluster. If you use the
    `--discover` option, *mongostat* will try to find all the members of the set or
    cluster from the member it initially connects to and will print one line per server
    per second for each. For a large cluster, this can get unmanageable fast, but
    it can be useful for small clusters and tools that can consume the data and present
    it in a more readable form.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在副本集或分片集群上运行 *mongostat*。如果使用 `--discover` 选项，*mongostat* 将尝试从初始连接的成员找到集合或群集的所有成员，并为每个服务器每秒打印一行数据。对于大型群集，这可能会快速变得不可管理，但对于小型群集和可以消费数据并以更可读的形式呈现的工具，这可能是有用的。
- en: '*mongostat* is a great way to get a quick snapshot of what your database is
    doing, but for long-term monitoring a tool like MongoDB Atlas or Ops Manager is
    preferred (see [Chapter 22](ch22.xhtml#chapter-mms)).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongostat* 是快速获取数据库正在执行的操作快照的好方法，但是对于长期监控，推荐使用类似 MongoDB Atlas 或 Ops Manager
    的工具（参见 [第22章](ch22.xhtml#chapter-mms)）。'
