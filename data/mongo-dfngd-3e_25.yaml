- en: Chapter 20\. Durability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章 耐久性
- en: Durability is a property of database systems that guarantees that write operations
    that have been committed to the database will survive permanently. For example,
    if a ticket reservation system reports that your concert seats have been booked,
    then your seats will remain booked even if some part of the reservation system
    crashes. For MongoDB, we need to consider durability at the cluster (or more specifically,
    replica set) level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 耐久性是数据库系统的一个属性，确保已提交到数据库的写操作将永久存储。例如，如果票务预订系统报告您的音乐会座位已被预订，那么即使预订系统的某些部分崩溃，您的座位也将保持预订状态。对于MongoDB，我们需要考虑集群（或更具体地说，副本集）级别的耐久性。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: How MongoDB guarantees durability at the replica set member level through journaling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB如何通过日志记录在副本集成员级别保证耐久性
- en: How MongoDB guarantees durability at the cluster level using write concern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB如何通过写关注（write concern）在集群级别保证耐久性
- en: How to configure your application and MongoDB cluster to give you the level
    of durability you need
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置你的应用程序和MongoDB集群以满足你所需的耐久性级别
- en: How MongoDB guarantees durability at the cluster level using read concern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB如何通过读关注（read concern）在集群级别保证耐久性
- en: How to set the durability level for transactions in replica sets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在副本集中设置事务的耐久性级别
- en: Throughout this chapter, we will discuss durability in replica sets. A three-member
    replica set is the most basic cluster recommended for production applications.
    The discussion here applies to replica sets with more members and to sharded clusters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论副本集中的耐久性。三成员副本集是推荐用于生产应用程序的最基本集群。这里的讨论适用于成员更多的副本集和分片集群。
- en: Durability at the Member Level Through Journaling
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过日志记录实现成员级别的耐久性
- en: To provide durability in the event of a server failure, MongoDB uses a write-ahead
    log (WAL) called the *journal*. A WAL is a commonly used technique for durability
    in database systems. The idea is that we simply write a representation of the
    changes to be made to the database to a durable medium (i.e., to disk) before
    applying those changes to the database itself. In many database systems, a WAL
    is used to provide the atomicity database property as well. However, MongoDB uses
    other techniques to ensure atomic writes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器故障时提供耐久性，MongoDB使用称为*日志*的写前日志（WAL）。写前日志是数据库系统中常用的耐久性技术。其基本思想是在将更改应用到数据库本身之前，我们仅将要进行的更改的表示写入持久性介质（即磁盘）。在许多数据库系统中，写前日志用于提供原子性数据库属性。然而，MongoDB使用其他技术来确保原子写入。
- en: Beginning in MongoDB 4.0, as an application performs writes to a replica set,
    for the data in all replicated collections MongoDB creates journal entries using
    the same format as the oplog.^([1](ch20.xhtml#idm45882335615752)) As discussed
    in [Chapter 11](ch11.xhtml#chapter-repl-comp), MongoDB uses statement-based replication
    based on an operations log, or *oplog*. The statements in the oplog are a representation
    of the actual MongoDB changes made to each document affected by a write. Therefore,
    oplog statements are easy to apply to any member of a replica set regardless of
    version, hardware, or any other differences between replica set members. In addition,
    each oplog statement is idempotent, meaning that it can be applied any number
    of times and the outcome will always be the same change to the database.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从MongoDB 4.0开始，当应用程序向副本集执行写入操作时，MongoDB为所有复制集合中的数据创建使用与操作日志（oplog）相同格式的日志条目。如在[第11章](ch11.xhtml#chapter-repl-comp)所述，MongoDB使用基于语句的复制，基于操作日志（oplog）。oplog中的语句是对每个文档受到写入影响的实际MongoDB更改的表示。因此，oplog语句易于应用到副本集的任何成员，无论版本、硬件或其他副本集成员之间的差异如何。此外，每个oplog语句都是幂等的，这意味着可以多次应用，并且结果总是对数据库的相同更改。
- en: Like most databases, MongoDB maintains in-memory views of both the journal and
    the database data files. By default, it flushes journal entries to disk every
    50 milliseconds and flushes database files to disk every 60 seconds. The 60-second
    interval for flushing data files is called a *checkpoint*. The journal is used
    to provide durability for data written since the last checkpoint. With respect
    to durability concerns, if the server suddenly stops, when it’s restarted the
    journal can be used to replay any writes that were not flushed to disk before
    the shutdown.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数数据库一样，MongoDB保持内存中的日志和数据库数据文件的视图。默认情况下，它每50毫秒刷新一次日志条目到磁盘，并每60秒刷新一次数据库文件到磁盘。刷新数据文件的60秒间隔称为*检查点*。日志用于为自上次检查点以来写入的数据提供持久性。就持久性问题而言，如果服务器突然停止，重新启动时可以使用日志来重放在关闭之前未刷新到磁盘的任何写入。
- en: For the journal files, MongoDB creates a subdirectory named *journal* under
    the *dbPath* directory. WiredTiger (MongoDB’s default storage engine) journal
    files have names with the format *WiredTigerLog.<sequence>*, where *<sequence>*
    is a zero-padded number starting from *0000000001*. Except for very small log
    records, MongoDB compresses the data written to the journal. Journal files have
    a maximum size limit of approximately 100 MB. Once a journal file exceeds that
    limit, MongoDB creates a new journal file and begins writing new records there.
    Because journal files are only needed to recover data since the last checkpoint,
    MongoDB automatically removes “old” journal files—i.e., those written prior to
    the most recent checkpoint—once a new checkpoint is written.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日志文件，MongoDB在*dbPath*目录下创建一个名为*journal*的子目录。WiredTiger（MongoDB的默认存储引擎）日志文件的名称格式为*WiredTigerLog.<sequence>*，其中*<sequence>*是从*0000000001*开始的零填充数字。除非是非常小的日志记录，MongoDB会压缩写入到日志的数据。日志文件的最大大小限制约为100
    MB。一旦日志文件超过该限制，MongoDB会创建一个新的日志文件，并开始在那里写入新记录。因为日志文件只需要用来恢复自上次检查点以来的数据，MongoDB会在写入新检查点后自动删除“旧”的日志文件，即写在最近检查点之前的日志文件。
- en: If there is a crash (or `kill -9`), *mongod* will replay its journal files on
    startup. By default, the greatest extent of lost writes are those made in the
    last 100 ms plus the time it takes to flush the journal writes to disk.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生崩溃（或`kill -9`），*mongod*将在启动时重新播放其日志文件。默认情况下，丢失写入的最大范围是在最后100毫秒内进行的写入，加上刷新日志写入到磁盘所需的时间。
- en: If your application requires a shorter interval for journal flushes, you have
    two options. One is to change the interval using the `--journalCommitInterval`
    option to the *mongod* command. This option accepts values ranging from 1 to 500
    ms. The other option, which we’ll look at in the next section, is to specify in
    the write concern that all writes should journal to disk. Shortening the interval
    for journaling to disk will negatively impact performance, so you need to be sure
    of the implications for your applications before changing the journaling default.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序需要更短的日志刷新间隔，有两个选项。一个是使用`--journalCommitInterval`选项来更改*mongod*命令的间隔。此选项接受从1到500毫秒的值。另一个选项，我们将在下一节中讨论，是在写关注中指定所有写入应该记录到磁盘。缩短日志到磁盘的间隔会对性能产生负面影响，因此在更改日志记录默认值之前，您需要确保了解对应用程序的影响。
- en: Durability at the Cluster Level Using Write Concern
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群级别使用写关注进行持久性
- en: With write concern, you can specify what level of acknowledgment your application
    requires in response to write requests. In a replica set, network partitions,
    server failures, or data center outages may keep writes from being replicated
    to every member, or even a majority of the members. When a normal state is restored
    to the replica set, it is possible that writes not replicated to a majority of
    members will be rolled back. In those situations, clients and the database may
    have a different view of what data has been committed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用写关注，您可以指定应用程序在响应写入请求时需要什么级别的确认。在副本集中，网络分区、服务器故障或数据中心宕机可能导致写入未被复制到每个成员，甚至大多数成员。当副本集恢复到正常状态时，可能会回滚未复制到大多数成员的写入。在这些情况下，客户端和数据库可能对已提交的数据有不同的视图。
- en: There are applications for which it might be acceptable in some circumstances
    to have writes rolled back. For example, it might be okay to roll back a small
    number of comments in a social application of some kind. MongoDB supports a range
    of durability guarantees at the cluster level to enable application designers
    to select the durability level that works best for their use case.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 某些情况下，允许写操作回滚的应用程序可能是可以接受的。例如，在某种社交应用程序中回滚少量评论可能是可以接受的。MongoDB支持在群集级别提供一系列耐久性保证，以便应用程序设计者选择最适合其用例的耐久性级别。
- en: The w and wtimeout Options for writeConcern
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`writeConcern`的`w`和`wtimeout`选项'
- en: 'The MongoDB query language supports specifying a write concern for all insert
    and update methods. As an example, suppose we have an ecommerce application and
    want to ensure that all orders are durable. Writing an order to the database might
    look something like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB查询语言支持为所有插入和更新方法指定写关注。例如，假设我们有一个电子商务应用程序，并希望确保所有订单都是耐久的。将订单写入数据库可能看起来像以下示例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All insert and update methods take a second parameter, a document. Within that
    document you can specify a value for `writeConcern`. In the preceding example,
    the write concern we have specified indicates that we want to see an acknowledgment
    from the server that the write completed successfully only if the write was successfully
    replicated to a majority of the members of our application’s replica set. In addition,
    the write should return an error if it is not replicated to a majority of replica
    set members in 100 ms or less. In the case of such an error, MongoDB does not
    undo successful data modifications performed before the write concern exceeded
    the time limit—it will be up to the application to choose how to handle timeouts
    in such situations. In general, you should configure the `wtimeout` value so that
    only in unusual circumstances will the application experience timeouts and any
    actions your application takes in response to a timeout error will ensure the
    correct state for your data. In most cases, your application should attempt to
    determine whether the timeout was a result of a transient slowdown in network
    communications or something more signficant.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有插入和更新方法都需要第二个参数，即文档。在该文档中，您可以指定`writeConcern`的值。在前面的示例中，我们指定的写关注表明，只有在成功将写操作成功复制到应用程序复制集的大多数成员时，我们才希望从服务器收到写完成的确认。此外，如果在100毫秒内未将写操作复制到复制集的大多数成员，则应返回错误。在这种错误情况下，MongoDB不会撤消在写关注超过时间限制之前执行的成功数据修改操作——应用程序将决定如何处理这些情况下的超时。一般来说，您应该配置`wtimeout`值，以便应用程序只在不寻常的情况下遇到超时，且应用程序在响应超时错误时应确保数据的正确状态。在大多数情况下，您的应用程序应尝试确定超时是否是由于网络通信中的瞬时减速或更重要的原因造成的。
- en: As the value for `w` in the write concern document, you may specify `"majority"`
    (as was done in this example). Alternatively, you may specify an integer between
    zero and the number of members in the replica set. Finally, it is possible to
    tag replica set members, say to identify those on SSDs versus spinning disks or
    those used for reporting versus OLTP workloads. You may specify a tag set as the
    value of `w` to ensure that writes will only be acknowledged once committed to
    at least one member of the replica set matching the provided tag set.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在写关注文档中的`w`值，您可以指定`"majority"`（就像在本例中所做的那样）。或者，您可以指定介于零和复制集成员数之间的整数。最后，可以标记复制集成员，例如识别用于报告与OLTP工作负载相比的SSD与旋转磁盘，或标识用于报告与OLTP工作负载相比的成员。您可以将标签集指定为`w`的值，以确保写入仅在至少一台符合提供的标签集的复制集成员上提交后才得到确认。
- en: The j (Journaling) Option for writeConcern
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`writeConcern`的`j`（日志记录）选项'
- en: 'In addition to providing a value for the `w` option, you may also request acknowledgment
    that the write operation has been written to the journal by using the `j` option
    in the write concern document. With a value of `true` for `j`, MongoDB acknowledges
    a successful write only after the requested number of members (the value for `w`)
    have written the operation to their on-disk journal. Continuing our example, if
    we want to ensure all writes are journaled on a majority of members, we can update
    the code as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为`w`选项提供一个值外，您还可以使用写关注文档中的`j`选项请求确认写操作已写入日志。对于`j`的值为`true`，MongoDB仅在所请求的成员数（即`w`的值）已将操作写入其磁盘日志后才确认成功写入。继续我们的示例，如果我们希望确保所有写入都被大多数成员日志记录，我们可以按以下方式更新代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Without waiting for journaling, there is a brief window of about 100 ms on each
    member when, if the server process or hardware goes down, a write could be lost.
    However, waiting for journaling before acknowledging writes to members of a replica
    set does have a performance penalty.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在不等待日志记录的情况下，每个成员大约有 100 毫秒的短暂窗口期，在此期间，如果服务器进程或硬件故障，写操作可能会丢失。然而，等待日志记录后再确认写入到副本集成员会对性能产生影响。
- en: It is essential that in addressing durability concerns for your applications,
    you carefully evaluate the requirements your application has and weigh the performance
    impacts of the durability settings you select.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理应用程序耐久性问题时，必须仔细评估应用程序的需求，并权衡所选耐久性设置的性能影响。
- en: Durability at a Cluster Level Using Read Concern
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群级别使用读关注的耐久性
- en: In MongoDB, `read concerns` allow for the configuration of when results are
    read. This can allow clients to see write results before those writes are durable.
    A read concern can be used with a write concern to control the level of consistency
    and availability guarantees made to an application. They should not be confused
    with `read preferences`, which deal with where the data is read from; specifically,
    read preferences determine the data bearing member(s) in the replica set. The
    default `read preferences` is to read from the primary.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MongoDB 中，`read concerns` 允许配置何时读取结果。这可以让客户端在这些写入持久化之前看到写入结果。可以将读关注与写关注一起使用，以控制向应用程序提供的一致性和可用性保证级别。它们不应与
    `read preferences` 混淆，后者处理数据从何处读取；具体而言，读偏好决定从副本集中的数据承载成员读取数据。默认的 `read preferences`
    是从主节点读取。
- en: '`Read concern` determines the consistency and isolation properties of the data
    being read. The default `readConcern` is `local`, which returns data with no guarantees
    that the data has been written to the majority of the data bearing replica set
    members. This can result in the data being rolled back in the future. The `majority`
    concern returns only durable data (will not be rolled back) that has been acknowledged
    by the majority of replica set members. In MongoDB 3.4, the `linearizable` concern
    was added. It ensures data returned reflects all successful majority-acknowledged
    writes that have completed prior to the start of the read operation. It may wait
    for concurrently executing writes to finish before providing results.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Read concern` 确定正在读取的数据的一致性和隔离特性。默认的 `readConcern` 是 `local`，返回的数据不保证已写入到大多数数据承载的副本集成员。这可能导致数据在将来被回滚。`majority`
    concern 只返回已被大多数副本集成员确认的持久数据（不会被回滚）。在 MongoDB 3.4 中，添加了 `linearizable` concern。它确保返回的数据反映了在读操作开始前已完成的所有成功的大多数确认写入。它可能会等待并发执行的写入操作完成后再提供结果。'
- en: In the same fashion, with `write concerns` you will need to weight the performance
    impacts of the `read concerns` against the durability and isolation guarantees
    they provide before selecting the appropriate concern for your application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，使用 `write concerns` 时，您需要权衡 `read concerns` 的性能影响，以及它们在选择适当的关注点时提供的耐久性和隔离保证。
- en: Durability of Transactions Using a Write Concern
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用写关注的事务耐久性
- en: In MongoDB, operations on individual documents are atomic. You can use embedded
    documents and arrays to express relationships between entities in a single document
    rather than using a normalized data model splitting entities and relationships
    across multiple collections. As a result, many applications do not require multi-document
    transactions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MongoDB 中，对单个文档的操作是原子的。您可以使用嵌入文档和数组在单个文档中表达实体之间的关系，而不是使用规范化的数据模型将实体和关系分割到多个集合中。因此，许多应用程序不需要多文档事务。
- en: However, for use cases that require atomicity for updates to multiple documents,
    MongoDB provides the ability to perform multi-document transactions against replica
    sets. Multi-document transactions can be used across multiple operations, documents,
    collections, and databases.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于需要对多个文档进行原子更新的用例，MongoDB 提供了针对副本集执行多文档事务的能力。多文档事务可以跨多个操作、文档、集合和数据库使用。
- en: Transactions require that all data changes within the transaction are successful.
    If any operation fails, the transaction aborts and all data changes are discarded.
    If all operations are successful, all data changes made in the transaction are
    saved and the writes become visible to future reads.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 事务要求事务内的所有数据更改都成功。如果任何操作失败，事务将中止并且所有数据更改都将被丢弃。如果所有操作都成功，事务中进行的所有数据更改都将被保存，并且写操作将对未来读取可见。
- en: As with individual write operations, you may specify a write concern for transactions.
    You set the write concern at the transaction level, not at the individual operation
    level. At the time of the commit, transactions use the transaction-level write
    concern to commit the write operations. Write concerns set for individual operations
    inside the transaction will be ignored.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个写操作一样，您可以为事务指定写关注点。您在事务级别设置写关注点，而不是在单个操作级别。在提交时，事务使用事务级别的写关注点来提交写操作。在事务内部设置的单个操作的写关注点将被忽略。
- en: 'You can set the write concern for the transaction commit at the transaction
    start. A write concern of `0` is not supported for transactions. If you use a
    write concern of `1` for a transaction, it can be rolled back if there is a failover.
    You may use a `writeConcern` of `"majority"` to ensure transactions are durable
    in the face of network and server failures that might force a failover in a replica
    set. The following provides an example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在事务开始时为事务提交设置写关注点。不支持事务的写关注点为`0`。如果您为事务使用写关注点为`1`，则如果发生故障转移，可以回滚事务。您可以使用`"majority"`写关注点来确保在副本集中因网络和服务器故障而导致故障转移时事务的持久性。以下提供了一个示例：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What MongoDB Does Not Guarantee
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB 不保证的内容
- en: There are a couple of situations where MongoDB cannot guarantee durability,
    such as if there are hardware issues or filesystem bugs. In particular, if a hard
    disk is corrupt, there is nothing MongoDB can do to protect your data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种情况下 MongoDB 无法保证持久性，比如硬件问题或文件系统漏洞。特别是，如果硬盘损坏，MongoDB 无法保护您的数据。
- en: 'Also, different varieties of hardware and software may have different durability
    guarantees. For example, some cheaper or older hard disks report a write’s success
    while the write is queued up to be written, not when it has actually been written.
    MongoDB cannot defend against misreporting at this level: if the system crashes,
    data may be lost.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，不同类型的硬件和软件可能具有不同的持久性保证。例如，一些较便宜或较旧的硬盘在写入被排队等待时报告写入成功，而不是实际写入时。MongoDB 无法在此级别防止错误报告：如果系统崩溃，可能会丢失数据。
- en: 'Basically, MongoDB is only as safe as the underlying system: if the hardware
    or filesystem destroys the data, MongoDB cannot prevent it. Use replication to
    defend against system issues. If one machine fails, hopefully another will still
    be functioning correctly.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，MongoDB 的安全性取决于底层系统：如果硬件或文件系统破坏数据，MongoDB 无法阻止。使用复制来防御系统问题。如果一台机器故障，希望另一台仍然正常运行。
- en: Checking for Corruption
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查损坏情况
- en: 'The `validate` command can be used to check a collection for corruption. To
    run `validate` on the *movies* collection, do:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`命令可用于检查集合是否损坏。要在*movies*集合上运行`validate`，请执行：'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The main field you’re looking for is `"valid"`, which will hopefully be `true`.
    If it is not, `validate` will give some details about the corruption it found.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的字段是`"valid"`，希望它是`true`。如果不是，`validate`将提供有关发现的损坏的详细信息。
- en: Most of the output from `validate` describes internal structures of the collection
    and timestamps used to understand the order of operations across a cluster. These
    are not particularly useful for debugging. (See [Appendix B](app02.xhtml#appendix_see)
    for more information on collection internals.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`的大部分输出描述了集合的内部结构和用于理解集群中操作顺序的时间戳。这些对于调试并不特别有用。（详见[附录 B](app02.xhtml#appendix_see)了解更多关于集合内部的信息。）'
- en: 'You can only run `validate` on collections, and it will also check the associated
    indexes in the field `indexDetails`. However, this requires a full `validate`,
    which is configured with the `{ full: true }` option.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '您只能在集合上运行`validate`，它还将检查字段`indexDetails`中的相关索引。但这需要一个完整的`validate`，可以通过`{
    full: true }`选项进行配置。'
- en: ^([1](ch20.xhtml#idm45882335615752-marker)) MongoDB uses a different format
    for writes to the local database, which stores data used in the replication process
    and other instance-specific data, but the principles and application are similar.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch20.xhtml#idm45882335615752-marker)) MongoDB 使用不同的格式来写入本地数据库，该数据库存储用于复制过程和其他特定实例数据的数据，但其原理和应用方式类似。
